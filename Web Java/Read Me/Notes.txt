+ Java Database Connectivity[ JDBC ]
	- JDBC is a specification( i.e collection of abstract classes & interfaces ) defined by Sun 	  Microsystems.
	- Implementing JDBC specifation is a job of database vendors.
	- Main purpose of JDBC is it minimize vendor dependancy.
	- It was released in 1997 as a part of JDK 1.1
	- java.sql and javax.sql package provides the API for accessing and processing data stored 		  in a data source (usually a relational database) using the Java programming language.
	
+ JDBC Versions
		JDK 1.1			-	JDBC 1.0
		J2SE 1.2		-	JDBC 2.0
		J2SE 1.4		-	JDBC 3.0
		Java SE 6		-	JDBC 4.0
		Java SE 7		-	JDBC 4.1
		Java SE 8		-	JDBC 4.2
		Java SE 9		-	JDBC 4.3
		
	- The JDBC 4.2 API includes both the java.sql package, referred to as the "JDBC core API", 		  and  the javax.sql package, referred to as the "JDBC Optional Package API".
	
	- The "javax.sql" package extends the functionality of the JDBC API from a client-side API 		  to a server-side API and it is an essential part of the Java EE.	

	- java.sql and javax.sql Features Introduced in the JDBC 4.2 API
	    * Added JDBCType enum and SQLType interface
	    * Support for REF CURSORS in CallableStatement
	    * DatabaseMetaData methods to return maximum Logical LOB size and if Ref Cursors are 	 	 		supported
	    * Added support for large update counts
	
+ What the java.sql Package Contains?
	# The java.sql package contains API for the following:	
	- Making a connection with a database via the DriverManager facility 
		* DriverManager class -- makes a connection with a driver
	    * Driver interface -- provides the API for registering and connecting drivers based on 			  JDBC technology; generally used only by the DriverManager class.
	    * SQLPermission class -- provides permission when code running within a Security 			  Manager, such as an applet.
		* DriverPropertyInfo class -- provides properties for a JDBC driver; not used by the 			  general user  
		
	- Sending SQL statements to a database
		* Connection interface -- provides methods for creating statements and managing 		  	connections and their properties
		* Statement -- used to send basic SQL statements.
	    * PreparedStatement -- used to send prepared statements or basic SQL statements.
    	* CallableStatement -- used to call database stored procedures.	    
	    * Savepoint -- provides savepoints in a transaction. 		
	    
	- Retrieving and updating the results of a query
	   	* ResultSet interface 	
	   	
	 - Standard mappings for SQL types to classes and interfaces in the Java language   	    
		* Array interface -- mapping for SQL ARRAY
		* Blob interface -- mapping for SQL BLOB
		* Clob interface -- mapping for SQL CLOB
		* Date class -- mapping for SQL DATE
		* NClob interface -- mapping for SQL NCLOB
		* Ref interface -- mapping for SQL REF
		* RowId interface -- mapping for SQL ROWID
		* Struct interface -- mapping for SQL STRUCT
		* SQLXML interface -- mapping for SQL XML
		* Time class -- mapping for SQL TIME
		* Timestamp class -- mapping for SQL TIMESTAMP
		* Types class -- provides constants for SQL types 
		
	- Custom mapping for SQL user-defined type ( UDT )to a class in the Java language.
		* SQLData interface -- specifies the mapping of a UDT to an instance of this class
		* SQLInput interface -- provides methods for reading UDT attributes from a stream
		* SQLOutput interface -- provides methods for writing UDT attributes back to a stream 
	
	- Metadata	
    	* DatabaseMetaData interface -- provides information about the database
    	* ResultSetMetaData interface -- provides information about the columns of a ResultSet 										     object
		* ParameterMetaData interface -- provides information about the parameters to 											 PreparedStatement commands 	
	- Exceptions
		* SQLException -- thrown by most methods when there is a problem accessing data and by 			  some methods for other reasons
    	* SQLWarning -- thrown to indicate a warning
	    * DataTruncation -- thrown to indicate that data may have been truncated
	    * BatchUpdateException -- thrown to indicate that not all commands in a batch update 			  executed successfully 	
	    
+ JDBC Drivers:
	- Database programs has been written in C/C++ and understands SQL. Java application 	   	     understands java language.
	- JDBC driver is a program which converts java request into SQL request and SQL response 		  into java response.
	- Every driver class must implement java.sql.Driver interface.
	- Types of JDBC Drivers:
		1. Type I
			* It is also known as "JDBC-ODBC Bridge" driver.
			* e.g. sun.jdbc.odbc.JdbcOdbcDriver
			* It implements the JDBC API as a mapping to another data access API, such as ODBC.
			* Open Database Connectivity( ODBC ) is standard API for accessing DBMS. ODBC was 				  originally developed by Microsoft and Simba Technologies during the early 1990s
			* Java APP <----> Type-I <----> ODBC Driver <----> Database
			* Starting with Java SE 8, the JDBC-ODBC Bridge will no longer be included with the 			  JDK.
			--Advantages--
			* Supported by most of the databases.
			* It is written in C language hence it is efficient.
			* Even if database is relocated no need to modify the java application.
			
			--Disadvantages--
			* As multiple layers are involved it is little slower.
			* Drivers of this type are generally dependent on a native library, which limits 				  their portability.
			* Can not use with Java EE application.
			
		2. Type II
			* It is also known as "Native-API" driver.
			* e.g. Oracle OCI(Oracle Call Interface) driver
			* It is written partly in the Java programming language and partly in native code.
			* Java App <----> Java|JNI|C <----> Database
							[ Type II Driver ]	
			--Advantanges--
			* It is implemented in C hence it is efficient.
			* It is faster than Type-I Driver.				
			
			--Disadvantanges--
			* These drivers use a native client library specific to the data source to which 				  they connect. Again, because of the native code, their portability is limited.
			* It can not be used with applets.
			
		3. Type III
			* It is also known as "Network Protocol/Middleware" driver.
			* e.g. Weblogic RMI Driver.
			* It uses a pure Java client and communicate with a middleware server using a 				  database-independent protocol(like tcp, http,...). The middleware server then 			  communicates the client's requests to the data source.
			* Java App <----> Type III Driver <----> Database
			
			--Advantages--
			* Since the communication between client and the middleware server is database 				  independent, there is no need for the database vendor library on the client. 
			* The middleware server can provide typical middleware services like caching,load 				  balancing, logging, and auditing.
			* A single driver can handle any database, provided the middleware supports it.
			
			--Disadvantages--
			* Requires database-specific coding to be done in the middle tier.
			* It requires seperate hardware set-up hence it is expensive
			
		4. Type IV
			* It is also known as "Database protocol/ Pure Java Driver".
			* e.g. Oracle Thin Driver.
			* It is pure Java driver and implements the network protocol for a specific data 				  source.   
			* The client connects directly to the data source.
			* Installing a JDBC driver generally consists of copying the driver to your 			  computer, then adding the location of it to your class path.
			* Java App <----> Type IV Driver <----> Database
			* Database vendor or third party can provide it.
			
			-- Advantages--
			* Completely implemented in Java to achieve platform independence.
			* These drivers don't translate the requests into an intermediary format (such as 				  ODBC).
			* The client application connects directly to the database server. No translation or 				* middleware layers are used, improving performance.
			
			--Disadvantages--
			* Drivers are database specific.
			
+ Supported JDBC Drivers and Databases	    
		-------------------------------------------------------------------------------------
		JDBC Driver Vendor				JDBC Driver Type 				Supported DB Server 
		-------------------------------------------------------------------------------------
		MySQL Connector/J Driver 5.1		Type 4							MySQL 5.1 

		Java DB 10.5.3.0 					Type 4 							Java DB 10.5.3.0 

		Oracle 11							Type 2 and Type 4 				Oracle 11 

		PostgreSQL 8.4 						Type 4 							PostgreSQL 8.4 

		DB2 9.7								Type 2							DB2 9.7 

		Sun, DataDirect 4.0 				Type 4							Sybase ASE 15 

		Sun, DataDirect 4.0 				Type 4 							DB2 9.7 

		Sun, DataDirect 4.0 				Type 4							MS SQL Server 2008 

		Sun, DataDirect 4.0 				Type 4							MySQL 5.1 
		-------------------------------------------------------------------------------------

+ Steps to connect java application to database
	1. Import JDBC package(s).
	2. Load and register JDBC driver.
	3. Establish connection with database using users credentials( i.e username and password )
	4. Create SQL statement object to execute queries.
	5. Prepare and execute the query.
	6. Close the resources.
-------------------------------------------------------------------------------------------		
+ Importing JDBC package:
	- Connectors:
		1. mysql-connector-java-5.1.44-bin.jar --> For mysql
		2. ojdbc14.jar --> For Oracle
		3. mongo-java-driver-3.5.0 --> For MongoDB
	- How to add this connector in runtime classpath/buildpath in eclipse?
		Right click on project --> Build Path --> Configure Build Path --> Java Build Path --> 
		Libraries --> Add External jars --> Choose right .jar from HDD --> Apply --> Ok.
	- Importing package:
		import java.sql.*;
			
+ Load and register JDBC driver:
	- Option 1:
			Driver driver = new com.mysql.jdbc.Driver();
			DriverManager.registerDriver(driver); 
			//or
			DriverManager.registerDriver(new Driver());
	- Option 2:
			Class.forName("com.mysql.jdbc.Driver");		
	Note: Applications no longer need to explicitly load JDBC drivers using Class.forName().
			
+ Establish connection with database:
	- Option 1:
		String USER_NAME = "root";
		String PASSWORD = "manager";
		String URL = "jdbc:mysql://localhost:3306/kdac";		
		Connection connection = DriverManager.getConnection(URL, USER_NAME, PASSWORD);
		
	- Option 2:
		"Config.properties"	//Create under src folder
			URL=jdbc\:mysql\://localhost\:3306/kdac
			USER=root
			PASSWORD=manager					
		
		"Program.java"	
			InputStream stream = Program.class.getClassLoader().
			getResourceAsStream("Config.properties");
			
			Properties prop = new Properties();
			prop.load(stream);			
			
			connection = DriverManager.getConnection(prop.getProperty("URL"),
			prop.getProperty("USER"), prop.getProperty("PASSWORD"));			
						
+ Create SQL statement:
	Statement statement = connection.createStatement();

+ Prepare and execute the query:
		String sql = "select * from BookTable";
		ResultSet rs =  statement.executeQuery(sql);
		while( rs.next( ) )
		{			
			int bookId = rs.getInt("book_id");		
			String subjectName = rs.getString("subject_name");		
			String bookName = rs.getString("book_name");		
			String authorName = rs.getString("author_name");		
			float price = rs.getFloat("price");				
		}
		rs.close();					
		
+ Close the resources:
		statement.close();
		connection.close();				
-------------------------------------------------------------------------------------------
+ ResultSet:
	- A ResultSet is a Java object that contains the results of executing an SQL query. In other 	   words, it contains the rows that satisfy the conditions of the query. The data stored in a 		  ResultSet object is retrieved through a set of get methods that allows access to the 			various columns of the current row. The ResultSet.next method is used to move to the 		  next row of the ResultSet, making it the current row. 

	- A ResultSet object maintains a cursor, which points to its current row of data. The cursor 		  moves down one row each time the method next is called. When a ResultSet object is first 		  created, the cursor is positioned before the first row, so the first call to the next 	   method puts the cursor on the first row, making it the current row. ResultSet rows can be 		  retrieved in sequence from top to bottom as the cursor moves down one row with each 		  	successive call to the method next.
	
	-  When we create a ResultSet there are three attributes we can set. These are:
	    1. Type
	    2. Concurrency
	    3. Holdability
 
+ ResultSet Type		
	1. ResultSet.TYPE_FORWARD_ONLY, 
		* The result set is nonscrollable; its cursor moves forward only, from top to bottom.
	2. ResultSet.TYPE_SCROLL_INSENSITIVE
		* The result set is scrollable: Its cursor can move forward or backward and can be moved 			  to a particular row or to a row whose position is relative to its current position. 
		* The result set generally does not show changes to the underlying database 
	3. ResultSet.TYPE_SCROLL_SENSITIVE
		* The result set is scrollable: Its cursor can move forward or backward and can be moved 			  to a particular row or to a row whose position is relative to its current position. 
		* The result set is sensitive to changes made while it is open.
	
	- Navigation Methods:
		Method 					Description
		absolute() 		Moves the R	esultSet to point at an absolute position. The position is a 							row number passed as parameter to the absolute() method.
		afterLast() 	Moves the ResultSet to point after the last row in the ResultSet.
		beforeFirst() 	Moves the ResultSet to point before the first row in the ResultSet.
		first() 		Moves the ResultSet to point at the first row in the ResultSet.
		last() 			Moves the ResultSet to point at the last row in the ResultSet.
		next() 			Moves the ResultSet to point at the next row in the ResultSet.
		previous() 		Moves the ResultSet to point at the previous row in the ResultSet.
		relative() 		Moves the ResultSet to point to a position relative to its current 							position. The relative position is passed as a parameter to the relative 							method, and can be both positive and negative.
	
	- The ResultSet interface also contains a set of methods you can use to inquire about the 		  current position of the ResultSet. These are: 
		Method 					Description
		getRow() 		Returns the row number of the current row - the row currently 							pointed to by the ResultSet.
		getType() 		Returns the ResultSet type.
		isAfterLast() 	Returns true if the ResultSet points after the last row. False if not.
		isBeforeFirst() Returns true if the ResultSet points before the first row. False if not.
		isFirst() 		Returns true if the ResultSet points at the first row. False if not. 
		
	- Finally the ResultSet interface also contains a method to update a row with database 		   changes, if the ResultSet is sensitive to change. 	
		Method 					Description
		refreshRow() 	Refreshes the column values of that row with the latest values from the 						database. 
		
+ ResultSet Concurrency
	The ResultSet concurrency determines whether the ResultSet can be updated, or only read. 
	1. ResultSet.CONCUR_READ_ONLY
		* Indicates a result set that cannot be updated programmatically 
	2. ResultSet.CONCUR_UPDATABLE
		* Indicates a result set that can be updated programmatically 
		
+ ResultSet Holdability
	1. ResultSet.CLOSE_CURSORS_AT_COMMIT
		* It means that all ResultSet instances are closed when connection.commit() method is 			  called on the connection that created the ResultSet. 
	2. ResultSet.HOLD_CURSORS_OVER_COMMIT	
		* It means that the ResultSet is kept open when the connection.commit() method is called 			  on the connection that created the ResultSet. 
		* It might be useful if you use the ResultSet to update values in the database.	
		
	"Statement createStatement(
								int resultSetType,
								int resultSetConcurrency, 
								int resultSetHoldability);"
								
		Creates a Statement object that will generate ResultSet objects with the given type, 			concurrency, and holdability.
	
